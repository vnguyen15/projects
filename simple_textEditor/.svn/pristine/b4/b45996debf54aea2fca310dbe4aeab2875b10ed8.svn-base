/**
 * 
 */
package five.progpracticum;

import java.awt.BorderLayout; 
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * This represents a Text Editor program.
 * 
 * @author Viet Nguyen
 * @version 1
 *
 */
public class TextEditorGUI {
    private final String[] FONT_STYLE = {"Plain", "Bold", "Italic"};
    
    private final String[] FONT_SIZE = {"8", "10", "12", "14", "16", "18", "20", "24", 
            "28", "32", "36", "40", "44", "48", "52", "58", "64", "70", "76"};
    private String[] myFontTypes;
    /**
     * This a main frame.
     */
    private JFrame myMainFrame;
    
    /**
     * This representing MenuBar
     */
    private TextMenuBar myMenuBar; 
    
    private JTextArea myTextArea;

    private JScrollPane myScrollPane;
    
    private String myCurrentType;
    
    private int myCurrentStyle;
    
    private int myCurrentSize;
    
    private int myStylePosition;
    
    private int myTypePosition;
    
    private int mySizePosition;
    
    private JFileChooser myChooser;
    
    
    
    public TextEditorGUI() {
        
        myMainFrame = new JFrame("Simple Text Editor Program");
       // myMainFrame.setLayout(new FlowLayout(FlowLayout.CENTER));
        myMenuBar = new TextMenuBar();
        myMainFrame.setJMenuBar(myMenuBar);
        
        createMenus();
    }
    

    
    private void createMenus () {
        
        final NewListener newMenu = new NewListener("New");
        
        myMenuBar.getMyNew().addActionListener(newMenu);
        final FileListener open = new FileListener();
        final FileListener save = new FileListener();
        myMenuBar.getMyOpen().addActionListener(open);
        myMenuBar.getMySave().addActionListener(save);
        
        myTextArea = new JTextArea();
        
        final WordWrapListener wordWrapListener = new WordWrapListener();
        myMenuBar.getMyWordWrapBox().addActionListener(wordWrapListener);
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();     
        myFontTypes = ge.getAvailableFontFamilyNames();
    
        myCurrentType = "Serif";
        myCurrentStyle = Font.PLAIN;
        myCurrentSize = 12;
        
        final FontListener fontType = new FontListener(myFontTypes, "Type");
        final FontListener fontStyle = new FontListener(FONT_STYLE, "Style");
        final FontListener fontSize = new FontListener(FONT_SIZE, "Size");
        myMenuBar.getMyType().addActionListener(fontType);
        myMenuBar.getMyStyle().addActionListener(fontStyle);
        myMenuBar.getMySize().addActionListener(fontSize);
        
        myScrollPane = new JScrollPane(myTextArea);

        myTextArea.setEditable(true);
        myMainFrame.add(myScrollPane, BorderLayout.CENTER); 
        
        myMainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        final Toolkit kit = Toolkit.getDefaultToolkit();  // getting tool kit object
        final Dimension screenSize = kit.getScreenSize();
        final int screenWidth = screenSize.width; 
        final int screenHeight = screenSize.height; 
        
        myMainFrame.setSize(screenWidth * 85 / 100, screenHeight * 85 / 100); 
       // myMainFrame.setLocationByPlatform(true);  
        
        //myMainFrame.pack();
        myMainFrame.setLocationRelativeTo(null);
        myMainFrame.setVisible(true);
    }
    
        
    
    public class FontListener implements ActionListener {
       
        
        private String[] myFont;
        
        private String myDescription;
        
        public FontListener(final String[] aFont, final String aDescription) {
            myFont = aFont;
            myDescription = aDescription;
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
            
            if ("Style".equals(myDescription)) {
                String input = (String) JOptionPane.showInputDialog
                        (null, "Select Font Style", "Font Style", 
                         JOptionPane.PLAIN_MESSAGE, new ImageIcon(),
                         myFont, myFont[myStylePosition]);
                if (myFont[1].equals(input)) {
                    int bold = Font.BOLD;
                    myTextArea.setFont(new Font(myCurrentType, bold, myCurrentSize));
                    myCurrentStyle = bold;
                    myStylePosition = 1;
                    
                } else if (myFont[2].equals(input)) {
                    int italic = Font.ITALIC;
                    myTextArea.setFont(new Font(myCurrentType, italic, myCurrentSize));
                    myCurrentStyle = italic;
                    myStylePosition = 2;
                } else {
                    int plain = Font.PLAIN;
                    myTextArea.setFont(new Font(myCurrentType, plain, myCurrentSize));
                    myCurrentStyle = plain;
                    myStylePosition = 2 + 1;
                }
         
            } else if ("Size".equals(myDescription)) {
                String input = (String) JOptionPane.showInputDialog(null,"Select Font Size",
                       "Font Style", JOptionPane.PLAIN_MESSAGE, new ImageIcon(), 
                       myFont, myFont[mySizePosition]);
                int i = 0;
                while (!input.equals(myFont[i])) {
                    i++;
                }
                myCurrentSize = Integer.parseInt(myFont[i]);
                myTextArea.setFont(new Font(myCurrentType, myCurrentStyle, myCurrentSize));
                mySizePosition = i;
                
            } else if ("Type".equals(myDescription)) {
                String input = (String) JOptionPane.showInputDialog(null, "Select Font Type", "Font Style", 
                                                                    JOptionPane.PLAIN_MESSAGE, new ImageIcon(), 
                                                                    myFont, myFont[myTypePosition]);
                int i = 0;
                while (!input.equals(myFont[i])) {
                    i++;
                }
                myCurrentType = myFont[i];
                myTextArea.setFont(new Font(myCurrentType, myCurrentStyle, myCurrentSize));
                myTypePosition = i;
            }
        }
        
    } // end FontListener
    
    public class WordWrapListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent anEvent) {
            
          /*  Object source = anEvent.getSource();
            AbstractButton origin;
            origin = (JCheckBoxMenuItem) source;*/
            //if (source.isSelected()) {
            if (myMenuBar.getMyWordWrapBox().isSelected()) {
                myTextArea.setLineWrap(true);
                myTextArea.setWrapStyleWord(true);
            } else {
                myTextArea.setLineWrap(false);
            }
           
        }
    }
    
    public class NewListener implements ActionListener {
        private String myName;
        
        public NewListener (final String aName) {
            myName = aName;
        }
        
        @Override
        public void actionPerformed(ActionEvent anEvent) {
            
            if ("New".equals(myName)) {
                myTextArea.setText(""); // clear TextArea
                // reset font
                myCurrentType = "Serif";
                myCurrentStyle = Font.PLAIN;
                myCurrentSize = 12;
                myTypePosition = 0;
                myStylePosition = 0;
                mySizePosition = 2;
                myTextArea.setFont(new Font(myCurrentType, myCurrentStyle, myCurrentSize));
            }
            
        }
        
    } // end FileListener
    
    private class FileListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent anEvent) {
            if (myChooser == null) {
                myChooser = new JFileChooser();
                myChooser.setCurrentDirectory(new File("."));
            }
            Object source = anEvent.getSource();
            
            int choice;
            if (source == myMenuBar.getMyOpen()) {
                
                myChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
               choice = myChooser.showOpenDialog(null);
            } else {
                
                myChooser.setFileFilter(new FileNameExtensionFilter("TXT (*.txt)", "txt"));
                /*myChooser.setFileFilter(new FileNameExtensionFilter("GIF (*.gif)", "gif"));
                myChooser.setFileFilter(new FileNameExtensionFilter("BMP (*.bmp)", "bmp"));
                myChooser.setFileFilter(new FileNameExtensionFilter("PNG (*.png)", "png"));*/
                choice = myChooser.showSaveDialog(myTextArea);
            }
           // choice = myChooser.showOpenDialog(null);
            File selected;
            if (choice == JFileChooser.APPROVE_OPTION) {
                selected = myChooser.getSelectedFile();
                if (selected == null) {
                    return;
                }
                if (source == myMenuBar.getMyOpen()) {
                    loadText(selected);
                } else {
                    saveText(selected);
                
                }
            }
        }// ending action performed
        
/*        private void saveImage(File aFile, String anExtension) {
            File newF = new File(aFile.getPath() + "." + anExtension);
            BufferedImage bi = new BufferedImage(myPanel.getWidth(), myPanel.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D pen = bi.createGraphics(); 
            myPanel.paintAll(pen); // will grab everything to the panel
            
            try {
                ImageIO.write(bi, anExtension, newF);
            }
            catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }*/
        private void loadText(File aFile) {
           // FileReader file = (FileReader) aFile;
            BufferedReader br;
            try {
                br = new BufferedReader(new FileReader(aFile.getPath()));
                try {
                    myTextArea.read(br, null);
                    br.close();
                }
                catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            catch (FileNotFoundException e1) {
                e1.printStackTrace();
            }
        }
        private void saveText(File aFile) {
            BufferedWriter bw;

                    try {
                        bw = new BufferedWriter(new FileWriter(aFile.getPath()));
                        myTextArea.write(bw);
                        bw.close();
                       // myTextArea.setText("");
         
                    }
                    catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    


        
        } // end of savText method
    }
}

